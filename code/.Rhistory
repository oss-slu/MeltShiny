length_t_test <- t.test(parrots_data$Length_Live, parrots_data$Length_Playback, na.action = na.omit)
length_p_value <- length_t_test$p.value
delay_t_test <- t.test(parrots_data$Delay_Live, parrots_data$Delay_Playback, na.action = na.omit)
delay_p_value <- delay_t_test$p.value
print(paste("Calls p-value:", calls_p_value))
print(paste("Length p-value:", length_p_value))
print(paste("Delay p-value:", delay_p_value))
calls_t_test <- t.test(parrots_data$Calls_Live, parrots_data$Calls_Playback)
calls_p_value <- calls_t_test$p.value
length_t_test <- t.test(parrots_data$Length_Live, parrots_data$Length_Playback, na.rm = TRUE)
length_p_value <- length_t_test$p.value
delay_t_test <- t.test(parrots_data$Delay_Live, parrots_data$Delay_Playback, na.rm = TRUE)
delay_p_value <- delay_t_test$p.value
calls_p_value
length_p_value
delay_p_value
library(ggplot2)
library(dplyr)
library(fosdata)
tacobell <- read.csv("https://mathstat.slu.edu/~clair/stat3850/data/tacobell.csv")
cor(tacobell$Ordered, tacobell$Received)
cor.test(tacobell$Ordered, tacobell$Received)
tacobell |>
ggplot(aes(x = Ordered, y = Received)) +
geom_point()
parrots_data <- read.csv("https://mathstat.slu.edu/~clair/stat3850/data/parrots.csv")
calls_t_test <- t.test(parrots_data$Calls_Live, parrots_data$Calls_Playback)
calls_p_value <- calls_t_test$p.value
length_t_test <- t.test(parrots_data$Length_Live, parrots_data$Length_Playback, na.rm = TRUE)
length_p_value <- length_t_test$p.value
delay_t_test <- t.test(parrots_data$Delay_Live, parrots_data$Delay_Playback, na.rm = TRUE)
delay_p_value <- delay_t_test$p.value
calls_p_value
length_p_value
delay_p_value
lm_model <- lm(Delay_Live ~ Calls_Live, data = parrots_data)
summary(lm_model)
library(Sleuth3)
data(ex0920)
library(Sleuth3)
data(ex0920)
# Calculate the mean and standard error of the mean (SEM)
mean_time <- mean(ex0920$Time)
sem_time <- sd(ex0920$Time) / sqrt(length(ex0920$Time))
# Calculate the margin of error (95% confidence)
margin_of_error <- qt(0.975, df = length(ex0920$Time) - 1) * sem_time
# Calculate the confidence interval
confidence_interval <- c(mean_time - margin_of_error, mean_time + margin_of_error)
# Print the confidence interval
print(confidence_interval)
library(Sleuth3)
data(ex0920)
t.test(mean_time, conf.level = 0.95)
library(Sleuth3)
data(ex0920)
t.test(ex0920$Time, conf.level = 0.95)
# Calculate the mean and standard error of the mean (SEM)
mean_time <- mean(ex0920$Time)
sem_time <- sd(ex0920$Time) / sqrt(length(ex0920$Time))
# Calculate the margin of error (95% confidence)
margin_of_error <- qt(0.975, df = length(ex0920$Time) - 1) * sem_time
# Calculate the confidence interval
confidence_interval <- c(mean_time - margin_of_error, mean_time + margin_of_error)
# Print the confidence interval
print(confidence_interval)
library(Sleuth3)
data(ex0920)
t.test(ex0920$Time, conf.level = 0.95)
library(ggplot2)
library(dplyr)
library(fosdata)
tacobell <- read.csv("https://mathstat.slu.edu/~clair/stat3850/data/tacobell.csv")
cor(tacobell$Ordered, tacobell$Received)
cor.test(tacobell$Ordered, tacobell$Received)
tacobell |>
ggplot(aes(x = Ordered, y = Received)) +
geom_point()
parrots_data <- read.csv("https://mathstat.slu.edu/~clair/stat3850/data/parrots.csv")
calls_t_test <- t.test(parrots_data$Calls_Live, parrots_data$Calls_Playback)
calls_p_value <- calls_t_test$p.value
length_t_test <- t.test(parrots_data$Length_Live, parrots_data$Length_Playback, na.rm = TRUE)
length_p_value <- length_t_test$p.value
delay_t_test <- t.test(parrots_data$Delay_Live, parrots_data$Delay_Playback, na.rm = TRUE)
delay_p_value <- delay_t_test$p.value
calls_p_value
length_p_value
delay_p_value
lm_model <- lm(Delay_Live ~ Calls_Live, data = parrots_data)
summary(lm_model)33
lm_model <- lm(Delay_Live ~ Calls_Live, data = parrots_data)
summary(lm_model)
library(Sleuth3)
data(ex0920)
t.test(ex0920$Time, conf.level = 0.95)
goliath <- c(0, 1, 2, 6, 6, 6)
david <- c(1, 1, 4, 4, 5, 6)
# Set the number of simulations
num_simulations <- 100000
# Simulate the rolls
goliath_rolls <- sample(goliath, 100000, replace = TRUE)
david_rolls <- sample(david, 100000, replace = TRUE)
# Count occurrences where Goliath has a larger value
goliath_larger_count <- sum(goliath_rolls > david_rolls)
# Calculate the probability
goliath_larger_count / 100000
goliath <- c(0, 1, 2, 6, 6, 6)
david <- c(1, 1, 4, 4, 5, 6)
# a.
num_simulations <- 100000
goliath_rolls <- sample(goliath, 100000, replace = TRUE)
david_rolls <- sample(david, 100000, replace = TRUE)
goliath_larger_count <- sum(goliath_rolls > david_rolls)
goliath_larger_count / 100000
goliath_larger <- sum(goliath_rolls > david_rolls)
goliath_larger / 100000
library(ggplot2)
library(dplyr)
library(fosdata)
tacobell <- read.csv("https://mathstat.slu.edu/~clair/stat3850/data/tacobell.csv")
cor(tacobell$Ordered, tacobell$Received)
cor.test(tacobell$Ordered, tacobell$Received)
tacobell |>
ggplot(aes(x = Ordered, y = Received)) +
geom_point()
parrots_data <- read.csv("https://mathstat.slu.edu/~clair/stat3850/data/parrots.csv")
calls_t_test <- t.test(parrots_data$Calls_Live, parrots_data$Calls_Playback)
calls_p_value <- calls_t_test$p.value
length_t_test <- t.test(parrots_data$Length_Live, parrots_data$Length_Playback, na.rm = TRUE)
length_p_value <- length_t_test$p.value
delay_t_test <- t.test(parrots_data$Delay_Live, parrots_data$Delay_Playback, na.rm = TRUE)
delay_p_value <- delay_t_test$p.value
calls_p_value
length_p_value
delay_p_value
lm_model <- lm(Delay_Live ~ Calls_Live, data = parrots_data)
summary(lm_model)
library(Sleuth3)
data(ex0920)
t.test(ex0920$Time, conf.level = 0.95)
goliath <- c(0, 1, 2, 6, 6, 6)
david <- c(1, 1, 4, 4, 5, 6)
# a.
num_simulations <- 100000
goliath_rolls <- sample(goliath, 100000, replace = TRUE)
david_rolls <- sample(david, 100000, replace = TRUE)
goliath_larger <- sum(goliath_rolls > david_rolls)
goliath_larger / 100000
b. david_larger
# b.
david_larger <- sum(david_rolls > goliath_rolls)
david_larger / 100000
# c.
davidsix <- sum(david_rolls == 6)
# Count occurrences where David wins and rolls a six
davidwinsand6 <- sum(david_rolls == 6 & david_rolls > sample(goliath_outcomes, davidsix, replace = TRUE))
# c.
davidsix <- sum(david_rolls == 6)
# Count occurrences where David wins and rolls a six
davidwinsand6 <- sum(david_rolls == 6 & david_rolls > sample(goliath, davidsix, replace = TRUE))
# Calculate the probability
probabilitydavidwins <- davidwinsand6 / davidsix
# c.
davidsix <- sum(david_rolls == 6)
# Count occurrences where David wins and rolls a six
davidwinsand6 <- sum(david_rolls == 6 & david_rolls > sample(goliath, davidsix, replace = TRUE))
# Calculate the probability
davidwinsand6 / davidsix
goliath <- c(0, 1, 2, 6, 6, 6)
david <- c(1, 1, 4, 4, 5, 6)
# a.
goliath_rolls <- sample(goliath, 100000, replace = TRUE)
david_rolls <- sample(david, 100000, replace = TRUE)
goliath_larger <- sum(goliath_rolls > david_rolls)
goliath_larger / 100000
# b.
david_larger <- sum(david_rolls > goliath_rolls)
david_larger / 100000
# c.
davidsix <- sum(david_rolls == 6)
goliath_rolls_six <- sample(goliath, davidsix, replace = TRUE)
david_wins_and_six <- sum(david_rolls == 6 & david_rolls > goliath_rolls_six)
david_wins_and_six / davidsix
goliath <- c(0, 1, 2, 6, 6, 6)
david <- c(1, 1, 4, 4, 5, 6)
# a.
goliath_rolls <- sample(goliath, 100000, replace = TRUE)
david_rolls <- sample(david, 100000, replace = TRUE)
goliath_larger <- sum(goliath_rolls > david_rolls)
goliath_larger / 100000
# b.
david_larger <- sum(david_rolls > goliath_rolls)
david_larger / 100000
# c.
davidsix <- sum(david_rolls == 6)
goliath_rolls_six <- sample(goliath, davidsix, replace = TRUE)
david_wins_and_six <- sum(david_rolls == 6 & david_rolls > goliath_rolls_six)
david_wins_and_six / davidsix
goliath <- c(0, 1, 2, 6, 6, 6)
david <- c(1, 1, 4, 4, 5, 6)
# a.
goliath_rolls <- sample(goliath, 100000, replace = TRUE)
david_rolls <- sample(david, 100000, replace = TRUE)
goliath_larger <- sum(goliath_rolls > david_rolls)
goliath_larger / 100000
# b.
david_larger <- sum(david_rolls > goliath_rolls)
david_larger / 100000
# c.
davidsix <- sum(david_rolls == 6)
goliath_rolls_six <- sample(goliath, davidsix, replace = TRUE)
david_wins_and_six <- sum(david_rolls == 6 & david_rolls > goliath_rolls_six)
david_wins_and_six / davidsix
goliath <- c(0, 1, 2, 6, 6, 6)
david <- c(1, 1, 4, 4, 5, 6)
# a.
goliath_rolls <- sample(goliath, 100000, replace = TRUE)
david_rolls <- sample(david, 100000, replace = TRUE)
goliath_larger <- sum(goliath_rolls > david_rolls)
goliath_larger / 100000
# b.
david_larger <- sum(david_rolls > goliath_rolls)
david_larger / 100000
# c.
davidsix <- sum(david_rolls == 6)
goliath_rolls_six <- sample(goliath, davidsix, replace = TRUE)
david_wins_and_six <- sum(david_rolls == 6 & david_rolls > goliath_rolls_six)
david_wins_and_six / davidsix
goliath <- c(0, 1, 2, 6, 6, 6)
david <- c(1, 1, 4, 4, 5, 6)
# a.
goliath_rolls <- sample(goliath, 100000, replace = TRUE)
david_rolls <- sample(david, 100000, replace = TRUE)
goliath_larger <- sum(goliath_rolls > david_rolls)
goliath_larger / 100000
# b.
david_larger <- sum(david_rolls > goliath_rolls)
david_larger / 100000
# c.
davidsix <- sum(david_rolls == 6)
goliath_rolls_six <- sample(goliath, davidsix, replace = TRUE)
david_wins_and_six <- sum(david_rolls == 6 & david_rolls > goliath_rolls_six)
david_wins_and_six / davidsix
library(ggplot2)
library(dplyr)
library(fosdata)
tacobell <- read.csv("https://mathstat.slu.edu/~clair/stat3850/data/tacobell.csv")
cor(tacobell$Ordered, tacobell$Received)
cor.test(tacobell$Ordered, tacobell$Received)
tacobell |>
ggplot(aes(x = Ordered, y = Received)) +
geom_point()
parrots_data <- read.csv("https://mathstat.slu.edu/~clair/stat3850/data/parrots.csv")
calls_t_test <- t.test(parrots_data$Calls_Live, parrots_data$Calls_Playback)
calls_p_value <- calls_t_test$p.value
length_t_test <- t.test(parrots_data$Length_Live, parrots_data$Length_Playback, na.rm = TRUE)
length_p_value <- length_t_test$p.value
delay_t_test <- t.test(parrots_data$Delay_Live, parrots_data$Delay_Playback, na.rm = TRUE)
delay_p_value <- delay_t_test$p.value
calls_p_value
length_p_value
delay_p_value
lm_model <- lm(Delay_Live ~ Calls_Live, data = parrots_data)
summary(lm_model)
library(Sleuth3)
data(ex0920)
t.test(ex0920$Time, conf.level = 0.95)
goliath <- c(0, 1, 2, 6, 6, 6)
david <- c(1, 1, 4, 4, 5, 6)
# a.
goliath_rolls <- sample(goliath, 100000, replace = TRUE)
david_rolls <- sample(david, 100000, replace = TRUE)
goliath_larger <- sum(goliath_rolls > david_rolls)
goliath_larger / 100000
# b.
david_larger <- sum(david_rolls > goliath_rolls)
david_larger / 100000
# c.
davidsix <- sum(david_rolls == 6)
goliath_rolls_six <- sample(goliath, davidsix, replace = TRUE)
david_wins_and_six <- sum(david_rolls == 6 & david_rolls > goliath_rolls_six)
david_wins_and_six / davidsix
# Simulate rolling David 4 times and summing the results
david_sums <- replicate(10000, sum(sample(david_outcomes, 4, replace = TRUE)))
# Simulate rolling David 4 times and summing the results
david_sums <- replicate(10000, sum(sample(david, 4, replace = TRUE)))
# Simulate rolling Goliath 4 times and summing the results
goliath_sums <- replicate(10000, sum(sample(goliath_outcomes, 4, replace = TRUE)))
# Simulate rolling David 4 times and summing the results
david_sums <- replicate(10000, sum(sample(david, 4, replace = TRUE)))
# Simulate rolling Goliath 4 times and summing the results
goliath_sums <- replicate(10000, sum(sample(goliath, 4, replace = TRUE)))
# Calculate probabilities
mean(david_sums > goliath_sums)
mean(goliath_sums > david_sums)
# Simulate rolling David 4 times and summing the results
david_sums <- replicate(10000000, sum(sample(david, 4, replace = TRUE)))
# Simulate rolling Goliath 4 times and summing the results
goliath_sums <- replicate(10000000, sum(sample(goliath, 4, replace = TRUE)))
# Calculate probabilities
mean(david_sums > goliath_sums)
mean(goliath_sums > david_sums)
# Simulate rolling David 4 times and summing the results
david_sums <- replicate(100000, sum(sample(david, 4, replace = TRUE)))
# Simulate rolling Goliath 4 times and summing the results
goliath_sums <- replicate(100000, sum(sample(goliath, 4, replace = TRUE)))
# Calculate probabilities
mean(david_sums > goliath_sums)
mean(goliath_sums > david_sums)
# Simulate rolling David 4 times and summing the results
david_sums <- replicate(100000, sum(sample(david, 4, replace = TRUE)))
# Simulate rolling Goliath 4 times and summing the results
goliath_sums <- replicate(100000, sum(sample(goliath, 4, replace = TRUE)))
# Calculate probabilities
mean(david_sums > goliath_sums)
mean(goliath_sums > david_sums)
# Simulate rolling David 4 times and summing the results
david_sums <- replicate(100000, sum(sample(david, 4, replace = TRUE)))
# Simulate rolling Goliath 4 times and summing the results
goliath_sums <- replicate(100000, sum(sample(goliath, 4, replace = TRUE)))
# Calculate probabilities
mean(david_sums > goliath_sums)
mean(goliath_sums > david_sums)
# Simulate rolling David 4 times and summing the results
david_sums <- replicate(1000000, sum(sample(david, 4, replace = TRUE)))
# Simulate rolling Goliath 4 times and summing the results
goliath_sums <- replicate(1000000, sum(sample(goliath, 4, replace = TRUE)))
# Calculate probabilities
mean(david_sums > goliath_sums)
mean(goliath_sums > david_sums)
# Calculate P(X > 3)
prob_x_gt_3 <- pnorm(-3)
print(paste("P(X > 3):", 1 - prob_x_gt_3))
# Calculate P(X > 6)
prob_x_gt_6 <- pnorm(-6)
print(paste("P(X > 6):", 1 - prob_x_gt_6))
# Calculate P(X > 3)
prob_x_gt_3 <- pnorm(-3)
pnorm(-3)
pnorm(-6)
# Calculate P(X > 3)
prob_x_gt_3 <- 1 - pnorm(3)
print(paste("P(X > 3):", prob_x_gt_3))
# Calculate P(X > 6)
prob_x_gt_6 <- 1 - pnorm(6)
print(paste("P(X > 6):", prob_x_gt_6))
1 - pnorm(3)
1 - pnorm(6)
a.
# a.
1 - pnorm(3)
1 - pnorm(6)
# b.
pexp(3, rate = 1, lower.tail = FALSE)
pexp(6, rate = 1, lower.tail = FALSE)
# a.
1 - pnorm(3)
1 - pnorm(6)
# b.
pexp(3, rate = 1)
pexp(6, rate = 1)
# a.
1 - pnorm(3)
1 - pnorm(6)
# b.
pexp(3, rate = 1, lower.tail = FALSE)
pexp(6, rate = 1, lower.tail = FALSE)
# a.
1 - pnorm(3)
1 - pnorm(6)
# b.
pexp(3, rate = 1, lower.tail = FALSE)
pexp(6, rate = 1, lower.tail = FALSE)
# a.
1 - pnorm(3)
1 - pnorm(6)
# b.
pexp(3, rate = 1)
pexp(6, rate = 1)
# a.
1 - pnorm(3)
1 - pnorm(6)
# b.
pexp(3, rate = 1, lower.tail = FALSE)
pexp(6, rate = 1, lower.tail = FALSE)
data(chimps)
ggplot(chimps, aes(x = age, y = grey_score_avg, color = sex)) +
geom_point() +
facet_wrap(~ subspecies, scales = "free") +
labs(title = "Grey Hair Score vs Age by Sex and Subspecies",
x = "Age",
y = "Grey Hair Score") +
theme_minimal()
chimpsduplicates <- duplicated(chimps$individual)
nrow(chimpsduplicates)
min(duplicates$individual)
chimpsduplicates <- duplicated(chimps$individual)
nrow(chimpsduplicates)
min(chimpsduplicates$individual)
View(chimps)
# Find duplicates
duplicates <- chimps[duplicated(chimps$individual) | duplicated(chimps$individual, fromLast = TRUE), ]
# Count the number of duplicates
num_duplicates <- nrow(duplicates)
# Find the first alphabetically among duplicates
first_alphabetically <- min(duplicates$individual)
# Display results
print(paste("Number of duplicates:", num_duplicates))
print(paste("First alphabetically among duplicates:", first_alphabetically))
older_chimps <- subset(chimps, age >= 15)
t.test(older_chimps$grey_score_avg, older_chimps$subspecies)
# Filter chimps data for individuals aged 15 or older
older_chimps <- subset(chimps, age >= 15)
# Perform t-test for difference in grey_score_avg between subspecies
t_test_result <- t.test(grey_score_avg ~ subspecies, data = older_chimps)
# Extract p-value from t-test result
p_value <- t_test_result$p.value
# Display results
print(paste("P-value for difference in grey_score_avg between subspecies of older chimpanzees:", p_value))
older_chimps <- subset(chimps, age >= 15)
t.test(grey_score_avg ~ subspecies, data = older_chimps)
library(ggplot2)
library(dplyr)
library(fosdata)
tacobell <- read.csv("https://mathstat.slu.edu/~clair/stat3850/data/tacobell.csv")
cor(tacobell$Ordered, tacobell$Received)
cor.test(tacobell$Ordered, tacobell$Received)
tacobell |>
ggplot(aes(x = Ordered, y = Received)) +
geom_point()
parrots_data <- read.csv("https://mathstat.slu.edu/~clair/stat3850/data/parrots.csv")
calls_t_test <- t.test(parrots_data$Calls_Live, parrots_data$Calls_Playback)
calls_p_value <- calls_t_test$p.value
length_t_test <- t.test(parrots_data$Length_Live, parrots_data$Length_Playback, na.rm = TRUE)
length_p_value <- length_t_test$p.value
delay_t_test <- t.test(parrots_data$Delay_Live, parrots_data$Delay_Playback, na.rm = TRUE)
delay_p_value <- delay_t_test$p.value
calls_p_value
length_p_value
delay_p_value
lm_model <- lm(Delay_Live ~ Calls_Live, data = parrots_data)
summary(lm_model)
library(Sleuth3)
data(ex0920)
t.test(ex0920$Time, conf.level = 0.95)
goliath <- c(0, 1, 2, 6, 6, 6)
david <- c(1, 1, 4, 4, 5, 6)
# a.
goliath_rolls <- sample(goliath, 100000, replace = TRUE)
david_rolls <- sample(david, 100000, replace = TRUE)
goliath_larger <- sum(goliath_rolls > david_rolls)
goliath_larger / 100000
# b.
david_larger <- sum(david_rolls > goliath_rolls)
david_larger / 100000
# c.
davidsix <- sum(david_rolls == 6)
goliath_rolls_six <- sample(goliath, davidsix, replace = TRUE)
david_wins_and_six <- sum(david_rolls == 6 & david_rolls > goliath_rolls_six)
david_wins_and_six / davidsix
david_sums <- replicate(1000000, sum(sample(david, 4, replace = TRUE)))
goliath_sums <- replicate(1000000, sum(sample(goliath, 4, replace = TRUE)))
mean(david_sums > goliath_sums)
mean(goliath_sums > david_sums)
# a.
1 - pnorm(3)
1 - pnorm(6)
# b.
pexp(3, rate = 1, lower.tail = FALSE)
pexp(6, rate = 1, lower.tail = FALSE)
data(chimps)
ggplot(chimps, aes(x = age, y = grey_score_avg, color = sex)) +
geom_point() +
facet_wrap(~ subspecies, scales = "free") +
labs(title = "Grey Hair Score vs Age by Sex and Subspecies",
x = "Age",
y = "Grey Hair Score") +
theme_minimal()
older_chimps <- subset(chimps, age >= 15)
t.test(grey_score_avg ~ subspecies, data = older_chimps)
install.packages("shiny")
library(shiny)
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("DT")
library(DT)
install.packages("ggplot2")
library(ggplot2)
install.packages("MeltR")
install.packages("meltr")
library(meltr)
install.packages("MeltR")
setwd("/path/to/your/project")
setwd("/path/to/your/project")
setwd("/MeltShiny/code")
setwd("/Users/swetharepalli/capstone/Meltshiny/code")
shiny::runApp()
install.packages("openxlsx")
library(openxlsx)
shiny::runApp()
install.packages(plotly)
install.packages("plotly")
library(plotly)
shiny::runApp()
install.packages("remotes")
library(remotes)
shiny::runApp()
install.package("ggrepel")
install.packages("ggrepel")
library(ggrepel)
shiny::runApp()
install.packages("MeltR")
